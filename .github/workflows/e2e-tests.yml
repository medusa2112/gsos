name: E2E Smoke Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  deployment_status:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  e2e-smoke-tests:
    name: E2E Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    # Only run on successful deployments or manual trigger
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'deployment_status' && github.event.deployment_status.state == 'success') ||
      github.event_name == 'push' ||
      github.event_name == 'pull_request'

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        include:
          - browser: chromium
            project: Desktop Chrome
          - browser: firefox
            project: Desktop Firefox
          - browser: webkit
            project: Desktop Safari

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install E2E test dependencies
        working-directory: tests/e2e
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        working-directory: tests/e2e
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Set environment variables
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "TEST_BASE_URL=https://${{ github.event.inputs.environment }}.gsos.app" >> $GITHUB_ENV
          elif [ "${{ github.event_name }}" == "deployment_status" ]; then
            echo "TEST_BASE_URL=${{ github.event.deployment_status.target_url }}" >> $GITHUB_ENV
          else
            echo "TEST_BASE_URL=http://localhost:3000" >> $GITHUB_ENV
          fi

      - name: Start local development server (for PR/push)
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        run: |
          pnpm dev --filter=@gsos/admin &
          pnpm dev --filter=@gsos/api &
          sleep 30
        env:
          NODE_ENV: test

      - name: Wait for application to be ready
        run: |
          timeout 300 bash -c 'until curl -f ${{ env.TEST_BASE_URL }}/health || curl -f ${{ env.TEST_BASE_URL }}; do sleep 5; done'

      - name: Run smoke tests
        working-directory: tests/e2e
        run: npx playwright test tests/smoke.spec.ts --project="${{ matrix.project }}"
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.TEST_BASE_URL }}
          CI: true

      - name: Run critical path tests
        working-directory: tests/e2e
        run: npx playwright test tests/admissions.spec.ts tests/students.spec.ts tests/attendance.spec.ts tests/finance.spec.ts tests/auth.spec.ts --project="${{ matrix.project }}" --grep="@critical"
        env:
          PLAYWRIGHT_BASE_URL: ${{ env.TEST_BASE_URL }}
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-results-${{ matrix.browser }}
          path: tests/e2e/test-results/
          retention-days: 7

      - name: Upload HTML report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report-${{ matrix.browser }}
          path: tests/e2e/playwright-report/
          retention-days: 7

      - name: Upload screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-screenshots-${{ matrix.browser }}
          path: tests/e2e/test-results/*/test-failed-*.png
          retention-days: 7

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: e2e-smoke-tests
    if: always()
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create test summary
        run: |
          echo "# E2E Smoke Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.e2e-smoke-tests.result }}" == "success" ]; then
            echo "‚úÖ All smoke tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.e2e-smoke-tests.result }}" == "failure" ]; then
            echo "‚ùå Some smoke tests failed. Check the artifacts for details." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è Smoke tests completed with warnings or were cancelled." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Tested Workflows" >> $GITHUB_STEP_SUMMARY
          echo "- üéì **Admissions**: Application submission ‚Üí Admin acceptance ‚Üí Student record creation" >> $GITHUB_STEP_SUMMARY
          echo "- üë®‚Äçüéì **Students**: Create/edit student, guardian linking, list queries" >> $GITHUB_STEP_SUMMARY
          echo "- üìö **Attendance**: Mark class attendance ‚Üí Student sees day status" >> $GITHUB_STEP_SUMMARY
          echo "- üí∞ **Finance**: Create invoice ‚Üí Payment processing ‚Üí Webhook reconciliation" >> $GITHUB_STEP_SUMMARY
          echo "- üîê **Authentication**: Role-based access control and security gates" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Browser Coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Chrome (Chromium)" >> $GITHUB_STEP_SUMMARY
          echo "- Firefox" >> $GITHUB_STEP_SUMMARY
          echo "- Safari (WebKit)" >> $GITHUB_STEP_SUMMARY

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: e2e-smoke-tests
    if: always() && (github.event_name == 'deployment_status' || github.ref == 'refs/heads/main')
    
    steps:
      - name: Notify Slack on success
        if: needs.e2e-smoke-tests.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ‚úÖ E2E Smoke Tests Passed!
            
            All critical user journeys are working correctly:
            ‚Ä¢ Admissions workflow ‚úÖ
            ‚Ä¢ Student management ‚úÖ  
            ‚Ä¢ Attendance tracking ‚úÖ
            ‚Ä¢ Finance operations ‚úÖ
            ‚Ä¢ Authentication & security ‚úÖ
            
            Environment: ${{ env.TEST_BASE_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: needs.e2e-smoke-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            ‚ùå E2E Smoke Tests Failed!
            
            Critical user journeys may be broken. Please check:
            ‚Ä¢ Test artifacts in GitHub Actions
            ‚Ä¢ Application logs
            ‚Ä¢ Recent deployments
            
            Environment: ${{ env.TEST_BASE_URL }}
            
            Action required: Investigate and fix failing tests before next deployment.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}